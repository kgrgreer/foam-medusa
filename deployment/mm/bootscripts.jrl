p({
  "class":"foam.core.script.Script",
  "id":"main",
  "clusterable":false,
  "code":"""
  /* Set AppConfig properties from jar manifest*/
  import foam.core.app.Mode;
  import foam.core.app.AppConfig;

  logger = (foam.core.logger.Logger) x.get("logger");
  appConfig = x.get("appConfig");
  title = foam.core.app.AppConfig.class.getPackage().getImplementationTitle();
  if ( foam.util.SafetyUtil.isEmpty(appConfig.getName()) &&
       ! foam.util.SafetyUtil.isEmpty(title) ) {
    appConfig.setName(title);
  }
  version = foam.core.app.AppConfig.class.getPackage().getImplementationVersion();
  if ( ! foam.util.SafetyUtil.isEmpty(version) ) {
    appConfig.setVersion(version);
  } else if ( foam.util.SafetyUtil.isEmpty(appConfig.getVersion()) ) {
    appConfig.setVersion("1.0.0");
  }
  mode = System.getProperty("appconfig.mode");
  if ( ! foam.util.SafetyUtil.isEmpty(mode) ) {
    mode = mode.substring(0,1).toUpperCase() + mode.substring(1).toLowerCase();
    m = Mode.forLabel(mode);
    appConfig.setMode(m);
  }
  port = System.getProperty("http.port");
  if ( port != null ) {
    appConfig.setUrl(appConfig.getUrl().replace("8080", port));
  }
  logger.log(new Object[] {"AppConfig", appConfig.getName(), appConfig.getVersion()});
  print("AppConfig "+appConfig.getName()+" "+appConfig.getVersion());

  // See Boot.java serviceDAO setup.
  // On startup, select() will be against repo services.0.
  // Mediator/Node replay put()s will hit the serviceDAO_ above,
  // which has a listener to Reload the service on change.
  dao = x.get("cSpecDAO");
  while ( dao != null &&
          ! ( dao instanceof foam.core.auth.AuthorizationDAO ) ) {
    dao = dao.getDelegate();
  }
  if ( dao == null )
    logger.error(new Object[] {"bootscript,main,AuthorizationDAO not found to set serviceDAO"});

  dao.setDelegate(new foam.core.medusa.MedusaAdapterDAO.Builder(x)
    .setCSpec(new foam.core.boot.CSpec.Builder(x).setName("cSpecDAO").build())
    .setDelegate(dao.getDelegate())
    .build());
  """
})
